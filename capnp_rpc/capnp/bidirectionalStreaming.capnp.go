// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type BidirectionalStreaming capnp.Client

// BidirectionalStreaming_TypeID is the unique identifier for the type BidirectionalStreaming.
const BidirectionalStreaming_TypeID = 0xd5bedf3eb236ee3d

func (c BidirectionalStreaming) DoServerStreaming(ctx context.Context, params func(BidirectionalStreaming_doServerStreaming_Params) error) (BidirectionalStreaming_doServerStreaming_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd5bedf3eb236ee3d,
			MethodID:      0,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming",
			MethodName:    "doServerStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BidirectionalStreaming_doServerStreaming_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BidirectionalStreaming_doServerStreaming_Results_Future{Future: ans.Future()}, release

}

func (c BidirectionalStreaming) DoClientStreaming(ctx context.Context, params func(BidirectionalStreaming_doClientStreaming_Params) error) (BidirectionalStreaming_doClientStreaming_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd5bedf3eb236ee3d,
			MethodID:      1,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming",
			MethodName:    "doClientStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BidirectionalStreaming_doClientStreaming_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BidirectionalStreaming_doClientStreaming_Results_Future{Future: ans.Future()}, release

}

func (c BidirectionalStreaming) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BidirectionalStreaming) String() string {
	return "BidirectionalStreaming(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BidirectionalStreaming) AddRef() BidirectionalStreaming {
	return BidirectionalStreaming(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BidirectionalStreaming) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BidirectionalStreaming) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BidirectionalStreaming) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BidirectionalStreaming) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming {
	return BidirectionalStreaming(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BidirectionalStreaming) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BidirectionalStreaming) IsSame(other BidirectionalStreaming) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BidirectionalStreaming) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BidirectionalStreaming) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BidirectionalStreaming_Server is a BidirectionalStreaming with a local implementation.
type BidirectionalStreaming_Server interface {
	DoServerStreaming(context.Context, BidirectionalStreaming_doServerStreaming) error

	DoClientStreaming(context.Context, BidirectionalStreaming_doClientStreaming) error
}

// BidirectionalStreaming_NewServer creates a new Server from an implementation of BidirectionalStreaming_Server.
func BidirectionalStreaming_NewServer(s BidirectionalStreaming_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BidirectionalStreaming_Methods(nil, s), s, c)
}

// BidirectionalStreaming_ServerToClient creates a new Client from an implementation of BidirectionalStreaming_Server.
// The caller is responsible for calling Release on the returned Client.
func BidirectionalStreaming_ServerToClient(s BidirectionalStreaming_Server) BidirectionalStreaming {
	return BidirectionalStreaming(capnp.NewClient(BidirectionalStreaming_NewServer(s)))
}

// BidirectionalStreaming_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BidirectionalStreaming_Methods(methods []server.Method, s BidirectionalStreaming_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd5bedf3eb236ee3d,
			MethodID:      0,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming",
			MethodName:    "doServerStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DoServerStreaming(ctx, BidirectionalStreaming_doServerStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd5bedf3eb236ee3d,
			MethodID:      1,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming",
			MethodName:    "doClientStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DoClientStreaming(ctx, BidirectionalStreaming_doClientStreaming{call})
		},
	})

	return methods
}

// BidirectionalStreaming_doServerStreaming holds the state for a server call to BidirectionalStreaming.doServerStreaming.
// See server.Call for documentation.
type BidirectionalStreaming_doServerStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BidirectionalStreaming_doServerStreaming) Args() BidirectionalStreaming_doServerStreaming_Params {
	return BidirectionalStreaming_doServerStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BidirectionalStreaming_doServerStreaming) AllocResults() (BidirectionalStreaming_doServerStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_doServerStreaming_Results(r), err
}

// BidirectionalStreaming_doClientStreaming holds the state for a server call to BidirectionalStreaming.doClientStreaming.
// See server.Call for documentation.
type BidirectionalStreaming_doClientStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BidirectionalStreaming_doClientStreaming) Args() BidirectionalStreaming_doClientStreaming_Params {
	return BidirectionalStreaming_doClientStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BidirectionalStreaming_doClientStreaming) AllocResults() (BidirectionalStreaming_doClientStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_doClientStreaming_Results(r), err
}

// BidirectionalStreaming_List is a list of BidirectionalStreaming.
type BidirectionalStreaming_List = capnp.CapList[BidirectionalStreaming]

// NewBidirectionalStreaming_List creates a new list of BidirectionalStreaming.
func NewBidirectionalStreaming_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BidirectionalStreaming](l), err
}

type BidirectionalStreaming_ServerCallback capnp.Client

// BidirectionalStreaming_ServerCallback_TypeID is the unique identifier for the type BidirectionalStreaming_ServerCallback.
const BidirectionalStreaming_ServerCallback_TypeID = 0xe6be9029df950c0e

func (c BidirectionalStreaming_ServerCallback) SendMessage(ctx context.Context, params func(BidirectionalStreaming_ServerCallback_sendMessage_Params) error) (BidirectionalStreaming_ServerCallback_sendMessage_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe6be9029df950c0e,
			MethodID:      0,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming.ServerCallback",
			MethodName:    "sendMessage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BidirectionalStreaming_ServerCallback_sendMessage_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BidirectionalStreaming_ServerCallback_sendMessage_Results_Future{Future: ans.Future()}, release

}

func (c BidirectionalStreaming_ServerCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BidirectionalStreaming_ServerCallback) String() string {
	return "BidirectionalStreaming_ServerCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BidirectionalStreaming_ServerCallback) AddRef() BidirectionalStreaming_ServerCallback {
	return BidirectionalStreaming_ServerCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BidirectionalStreaming_ServerCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BidirectionalStreaming_ServerCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BidirectionalStreaming_ServerCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_ServerCallback) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_ServerCallback {
	return BidirectionalStreaming_ServerCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BidirectionalStreaming_ServerCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BidirectionalStreaming_ServerCallback) IsSame(other BidirectionalStreaming_ServerCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BidirectionalStreaming_ServerCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BidirectionalStreaming_ServerCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BidirectionalStreaming_ServerCallback_Server is a BidirectionalStreaming_ServerCallback with a local implementation.
type BidirectionalStreaming_ServerCallback_Server interface {
	SendMessage(context.Context, BidirectionalStreaming_ServerCallback_sendMessage) error
}

// BidirectionalStreaming_ServerCallback_NewServer creates a new Server from an implementation of BidirectionalStreaming_ServerCallback_Server.
func BidirectionalStreaming_ServerCallback_NewServer(s BidirectionalStreaming_ServerCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BidirectionalStreaming_ServerCallback_Methods(nil, s), s, c)
}

// BidirectionalStreaming_ServerCallback_ServerToClient creates a new Client from an implementation of BidirectionalStreaming_ServerCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func BidirectionalStreaming_ServerCallback_ServerToClient(s BidirectionalStreaming_ServerCallback_Server) BidirectionalStreaming_ServerCallback {
	return BidirectionalStreaming_ServerCallback(capnp.NewClient(BidirectionalStreaming_ServerCallback_NewServer(s)))
}

// BidirectionalStreaming_ServerCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BidirectionalStreaming_ServerCallback_Methods(methods []server.Method, s BidirectionalStreaming_ServerCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe6be9029df950c0e,
			MethodID:      0,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming.ServerCallback",
			MethodName:    "sendMessage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendMessage(ctx, BidirectionalStreaming_ServerCallback_sendMessage{call})
		},
	})

	return methods
}

// BidirectionalStreaming_ServerCallback_sendMessage holds the state for a server call to BidirectionalStreaming_ServerCallback.sendMessage.
// See server.Call for documentation.
type BidirectionalStreaming_ServerCallback_sendMessage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BidirectionalStreaming_ServerCallback_sendMessage) Args() BidirectionalStreaming_ServerCallback_sendMessage_Params {
	return BidirectionalStreaming_ServerCallback_sendMessage_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BidirectionalStreaming_ServerCallback_sendMessage) AllocResults() (BidirectionalStreaming_ServerCallback_sendMessage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_ServerCallback_sendMessage_Results(r), err
}

// BidirectionalStreaming_ServerCallback_List is a list of BidirectionalStreaming_ServerCallback.
type BidirectionalStreaming_ServerCallback_List = capnp.CapList[BidirectionalStreaming_ServerCallback]

// NewBidirectionalStreaming_ServerCallback_List creates a new list of BidirectionalStreaming_ServerCallback.
func NewBidirectionalStreaming_ServerCallback_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_ServerCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BidirectionalStreaming_ServerCallback](l), err
}

type BidirectionalStreaming_ServerCallback_sendMessage_Params capnp.Struct

// BidirectionalStreaming_ServerCallback_sendMessage_Params_TypeID is the unique identifier for the type BidirectionalStreaming_ServerCallback_sendMessage_Params.
const BidirectionalStreaming_ServerCallback_sendMessage_Params_TypeID = 0xfab4f836800f6853

func NewBidirectionalStreaming_ServerCallback_sendMessage_Params(s *capnp.Segment) (BidirectionalStreaming_ServerCallback_sendMessage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_ServerCallback_sendMessage_Params(st), err
}

func NewRootBidirectionalStreaming_ServerCallback_sendMessage_Params(s *capnp.Segment) (BidirectionalStreaming_ServerCallback_sendMessage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_ServerCallback_sendMessage_Params(st), err
}

func ReadRootBidirectionalStreaming_ServerCallback_sendMessage_Params(msg *capnp.Message) (BidirectionalStreaming_ServerCallback_sendMessage_Params, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_ServerCallback_sendMessage_Params(root.Struct()), err
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) String() string {
	str, _ := text.Marshal(0xfab4f836800f6853, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_ServerCallback_sendMessage_Params) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_ServerCallback_sendMessage_Params {
	return BidirectionalStreaming_ServerCallback_sendMessage_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) StreamingMsg() (BidirectionalStreamingMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BidirectionalStreamingMessage(p.Struct()), err
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) HasStreamingMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) SetStreamingMsg(v BidirectionalStreamingMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStreamingMsg sets the streamingMsg field to a newly
// allocated BidirectionalStreamingMessage struct, preferring placement in s's segment.
func (s BidirectionalStreaming_ServerCallback_sendMessage_Params) NewStreamingMsg() (BidirectionalStreamingMessage, error) {
	ss, err := NewBidirectionalStreamingMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BidirectionalStreamingMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// BidirectionalStreaming_ServerCallback_sendMessage_Params_List is a list of BidirectionalStreaming_ServerCallback_sendMessage_Params.
type BidirectionalStreaming_ServerCallback_sendMessage_Params_List = capnp.StructList[BidirectionalStreaming_ServerCallback_sendMessage_Params]

// NewBidirectionalStreaming_ServerCallback_sendMessage_Params creates a new list of BidirectionalStreaming_ServerCallback_sendMessage_Params.
func NewBidirectionalStreaming_ServerCallback_sendMessage_Params_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_ServerCallback_sendMessage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BidirectionalStreaming_ServerCallback_sendMessage_Params](l), err
}

// BidirectionalStreaming_ServerCallback_sendMessage_Params_Future is a wrapper for a BidirectionalStreaming_ServerCallback_sendMessage_Params promised by a client call.
type BidirectionalStreaming_ServerCallback_sendMessage_Params_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_ServerCallback_sendMessage_Params_Future) Struct() (BidirectionalStreaming_ServerCallback_sendMessage_Params, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_ServerCallback_sendMessage_Params(p.Struct()), err
}
func (p BidirectionalStreaming_ServerCallback_sendMessage_Params_Future) StreamingMsg() BidirectionalStreamingMessage_Future {
	return BidirectionalStreamingMessage_Future{Future: p.Future.Field(0, nil)}
}

type BidirectionalStreaming_ServerCallback_sendMessage_Results capnp.Struct

// BidirectionalStreaming_ServerCallback_sendMessage_Results_TypeID is the unique identifier for the type BidirectionalStreaming_ServerCallback_sendMessage_Results.
const BidirectionalStreaming_ServerCallback_sendMessage_Results_TypeID = 0xe29d561fd8871462

func NewBidirectionalStreaming_ServerCallback_sendMessage_Results(s *capnp.Segment) (BidirectionalStreaming_ServerCallback_sendMessage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_ServerCallback_sendMessage_Results(st), err
}

func NewRootBidirectionalStreaming_ServerCallback_sendMessage_Results(s *capnp.Segment) (BidirectionalStreaming_ServerCallback_sendMessage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_ServerCallback_sendMessage_Results(st), err
}

func ReadRootBidirectionalStreaming_ServerCallback_sendMessage_Results(msg *capnp.Message) (BidirectionalStreaming_ServerCallback_sendMessage_Results, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_ServerCallback_sendMessage_Results(root.Struct()), err
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Results) String() string {
	str, _ := text.Marshal(0xe29d561fd8871462, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_ServerCallback_sendMessage_Results) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_ServerCallback_sendMessage_Results {
	return BidirectionalStreaming_ServerCallback_sendMessage_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_ServerCallback_sendMessage_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_ServerCallback_sendMessage_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BidirectionalStreaming_ServerCallback_sendMessage_Results_List is a list of BidirectionalStreaming_ServerCallback_sendMessage_Results.
type BidirectionalStreaming_ServerCallback_sendMessage_Results_List = capnp.StructList[BidirectionalStreaming_ServerCallback_sendMessage_Results]

// NewBidirectionalStreaming_ServerCallback_sendMessage_Results creates a new list of BidirectionalStreaming_ServerCallback_sendMessage_Results.
func NewBidirectionalStreaming_ServerCallback_sendMessage_Results_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_ServerCallback_sendMessage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BidirectionalStreaming_ServerCallback_sendMessage_Results](l), err
}

// BidirectionalStreaming_ServerCallback_sendMessage_Results_Future is a wrapper for a BidirectionalStreaming_ServerCallback_sendMessage_Results promised by a client call.
type BidirectionalStreaming_ServerCallback_sendMessage_Results_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_ServerCallback_sendMessage_Results_Future) Struct() (BidirectionalStreaming_ServerCallback_sendMessage_Results, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_ServerCallback_sendMessage_Results(p.Struct()), err
}

type BidirectionalStreaming_ClientCallback capnp.Client

// BidirectionalStreaming_ClientCallback_TypeID is the unique identifier for the type BidirectionalStreaming_ClientCallback.
const BidirectionalStreaming_ClientCallback_TypeID = 0xf2525f9e024e6c72

func (c BidirectionalStreaming_ClientCallback) SendMessage(ctx context.Context, params func(BidirectionalStreaming_ClientCallback_sendMessage_Params) error) (BidirectionalStreaming_ClientCallback_sendMessage_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf2525f9e024e6c72,
			MethodID:      0,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming.ClientCallback",
			MethodName:    "sendMessage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BidirectionalStreaming_ClientCallback_sendMessage_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BidirectionalStreaming_ClientCallback_sendMessage_Results_Future{Future: ans.Future()}, release

}

func (c BidirectionalStreaming_ClientCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BidirectionalStreaming_ClientCallback) String() string {
	return "BidirectionalStreaming_ClientCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BidirectionalStreaming_ClientCallback) AddRef() BidirectionalStreaming_ClientCallback {
	return BidirectionalStreaming_ClientCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BidirectionalStreaming_ClientCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BidirectionalStreaming_ClientCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BidirectionalStreaming_ClientCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_ClientCallback) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_ClientCallback {
	return BidirectionalStreaming_ClientCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BidirectionalStreaming_ClientCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BidirectionalStreaming_ClientCallback) IsSame(other BidirectionalStreaming_ClientCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BidirectionalStreaming_ClientCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BidirectionalStreaming_ClientCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BidirectionalStreaming_ClientCallback_Server is a BidirectionalStreaming_ClientCallback with a local implementation.
type BidirectionalStreaming_ClientCallback_Server interface {
	SendMessage(context.Context, BidirectionalStreaming_ClientCallback_sendMessage) error
}

// BidirectionalStreaming_ClientCallback_NewServer creates a new Server from an implementation of BidirectionalStreaming_ClientCallback_Server.
func BidirectionalStreaming_ClientCallback_NewServer(s BidirectionalStreaming_ClientCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BidirectionalStreaming_ClientCallback_Methods(nil, s), s, c)
}

// BidirectionalStreaming_ClientCallback_ServerToClient creates a new Client from an implementation of BidirectionalStreaming_ClientCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func BidirectionalStreaming_ClientCallback_ServerToClient(s BidirectionalStreaming_ClientCallback_Server) BidirectionalStreaming_ClientCallback {
	return BidirectionalStreaming_ClientCallback(capnp.NewClient(BidirectionalStreaming_ClientCallback_NewServer(s)))
}

// BidirectionalStreaming_ClientCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BidirectionalStreaming_ClientCallback_Methods(methods []server.Method, s BidirectionalStreaming_ClientCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf2525f9e024e6c72,
			MethodID:      0,
			InterfaceName: "capnp/schema/bidirectionalStreaming.capnp:BidirectionalStreaming.ClientCallback",
			MethodName:    "sendMessage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendMessage(ctx, BidirectionalStreaming_ClientCallback_sendMessage{call})
		},
	})

	return methods
}

// BidirectionalStreaming_ClientCallback_sendMessage holds the state for a server call to BidirectionalStreaming_ClientCallback.sendMessage.
// See server.Call for documentation.
type BidirectionalStreaming_ClientCallback_sendMessage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BidirectionalStreaming_ClientCallback_sendMessage) Args() BidirectionalStreaming_ClientCallback_sendMessage_Params {
	return BidirectionalStreaming_ClientCallback_sendMessage_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BidirectionalStreaming_ClientCallback_sendMessage) AllocResults() (BidirectionalStreaming_ClientCallback_sendMessage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_ClientCallback_sendMessage_Results(r), err
}

// BidirectionalStreaming_ClientCallback_List is a list of BidirectionalStreaming_ClientCallback.
type BidirectionalStreaming_ClientCallback_List = capnp.CapList[BidirectionalStreaming_ClientCallback]

// NewBidirectionalStreaming_ClientCallback_List creates a new list of BidirectionalStreaming_ClientCallback.
func NewBidirectionalStreaming_ClientCallback_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_ClientCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BidirectionalStreaming_ClientCallback](l), err
}

type BidirectionalStreaming_ClientCallback_sendMessage_Params capnp.Struct

// BidirectionalStreaming_ClientCallback_sendMessage_Params_TypeID is the unique identifier for the type BidirectionalStreaming_ClientCallback_sendMessage_Params.
const BidirectionalStreaming_ClientCallback_sendMessage_Params_TypeID = 0xb8c98afff055a741

func NewBidirectionalStreaming_ClientCallback_sendMessage_Params(s *capnp.Segment) (BidirectionalStreaming_ClientCallback_sendMessage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_ClientCallback_sendMessage_Params(st), err
}

func NewRootBidirectionalStreaming_ClientCallback_sendMessage_Params(s *capnp.Segment) (BidirectionalStreaming_ClientCallback_sendMessage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_ClientCallback_sendMessage_Params(st), err
}

func ReadRootBidirectionalStreaming_ClientCallback_sendMessage_Params(msg *capnp.Message) (BidirectionalStreaming_ClientCallback_sendMessage_Params, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_ClientCallback_sendMessage_Params(root.Struct()), err
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) String() string {
	str, _ := text.Marshal(0xb8c98afff055a741, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_ClientCallback_sendMessage_Params) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_ClientCallback_sendMessage_Params {
	return BidirectionalStreaming_ClientCallback_sendMessage_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) StreamingMsg() (BidirectionalStreamingMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BidirectionalStreamingMessage(p.Struct()), err
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) HasStreamingMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) SetStreamingMsg(v BidirectionalStreamingMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStreamingMsg sets the streamingMsg field to a newly
// allocated BidirectionalStreamingMessage struct, preferring placement in s's segment.
func (s BidirectionalStreaming_ClientCallback_sendMessage_Params) NewStreamingMsg() (BidirectionalStreamingMessage, error) {
	ss, err := NewBidirectionalStreamingMessage(capnp.Struct(s).Segment())
	if err != nil {
		return BidirectionalStreamingMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// BidirectionalStreaming_ClientCallback_sendMessage_Params_List is a list of BidirectionalStreaming_ClientCallback_sendMessage_Params.
type BidirectionalStreaming_ClientCallback_sendMessage_Params_List = capnp.StructList[BidirectionalStreaming_ClientCallback_sendMessage_Params]

// NewBidirectionalStreaming_ClientCallback_sendMessage_Params creates a new list of BidirectionalStreaming_ClientCallback_sendMessage_Params.
func NewBidirectionalStreaming_ClientCallback_sendMessage_Params_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_ClientCallback_sendMessage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BidirectionalStreaming_ClientCallback_sendMessage_Params](l), err
}

// BidirectionalStreaming_ClientCallback_sendMessage_Params_Future is a wrapper for a BidirectionalStreaming_ClientCallback_sendMessage_Params promised by a client call.
type BidirectionalStreaming_ClientCallback_sendMessage_Params_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_ClientCallback_sendMessage_Params_Future) Struct() (BidirectionalStreaming_ClientCallback_sendMessage_Params, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_ClientCallback_sendMessage_Params(p.Struct()), err
}
func (p BidirectionalStreaming_ClientCallback_sendMessage_Params_Future) StreamingMsg() BidirectionalStreamingMessage_Future {
	return BidirectionalStreamingMessage_Future{Future: p.Future.Field(0, nil)}
}

type BidirectionalStreaming_ClientCallback_sendMessage_Results capnp.Struct

// BidirectionalStreaming_ClientCallback_sendMessage_Results_TypeID is the unique identifier for the type BidirectionalStreaming_ClientCallback_sendMessage_Results.
const BidirectionalStreaming_ClientCallback_sendMessage_Results_TypeID = 0xd2256de931e25133

func NewBidirectionalStreaming_ClientCallback_sendMessage_Results(s *capnp.Segment) (BidirectionalStreaming_ClientCallback_sendMessage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_ClientCallback_sendMessage_Results(st), err
}

func NewRootBidirectionalStreaming_ClientCallback_sendMessage_Results(s *capnp.Segment) (BidirectionalStreaming_ClientCallback_sendMessage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_ClientCallback_sendMessage_Results(st), err
}

func ReadRootBidirectionalStreaming_ClientCallback_sendMessage_Results(msg *capnp.Message) (BidirectionalStreaming_ClientCallback_sendMessage_Results, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_ClientCallback_sendMessage_Results(root.Struct()), err
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Results) String() string {
	str, _ := text.Marshal(0xd2256de931e25133, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_ClientCallback_sendMessage_Results) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_ClientCallback_sendMessage_Results {
	return BidirectionalStreaming_ClientCallback_sendMessage_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_ClientCallback_sendMessage_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_ClientCallback_sendMessage_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BidirectionalStreaming_ClientCallback_sendMessage_Results_List is a list of BidirectionalStreaming_ClientCallback_sendMessage_Results.
type BidirectionalStreaming_ClientCallback_sendMessage_Results_List = capnp.StructList[BidirectionalStreaming_ClientCallback_sendMessage_Results]

// NewBidirectionalStreaming_ClientCallback_sendMessage_Results creates a new list of BidirectionalStreaming_ClientCallback_sendMessage_Results.
func NewBidirectionalStreaming_ClientCallback_sendMessage_Results_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_ClientCallback_sendMessage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BidirectionalStreaming_ClientCallback_sendMessage_Results](l), err
}

// BidirectionalStreaming_ClientCallback_sendMessage_Results_Future is a wrapper for a BidirectionalStreaming_ClientCallback_sendMessage_Results promised by a client call.
type BidirectionalStreaming_ClientCallback_sendMessage_Results_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_ClientCallback_sendMessage_Results_Future) Struct() (BidirectionalStreaming_ClientCallback_sendMessage_Results, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_ClientCallback_sendMessage_Results(p.Struct()), err
}

type BidirectionalStreaming_doServerStreaming_Params capnp.Struct

// BidirectionalStreaming_doServerStreaming_Params_TypeID is the unique identifier for the type BidirectionalStreaming_doServerStreaming_Params.
const BidirectionalStreaming_doServerStreaming_Params_TypeID = 0xd81385778574ee8b

func NewBidirectionalStreaming_doServerStreaming_Params(s *capnp.Segment) (BidirectionalStreaming_doServerStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_doServerStreaming_Params(st), err
}

func NewRootBidirectionalStreaming_doServerStreaming_Params(s *capnp.Segment) (BidirectionalStreaming_doServerStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_doServerStreaming_Params(st), err
}

func ReadRootBidirectionalStreaming_doServerStreaming_Params(msg *capnp.Message) (BidirectionalStreaming_doServerStreaming_Params, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_doServerStreaming_Params(root.Struct()), err
}

func (s BidirectionalStreaming_doServerStreaming_Params) String() string {
	str, _ := text.Marshal(0xd81385778574ee8b, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_doServerStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_doServerStreaming_Params) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_doServerStreaming_Params {
	return BidirectionalStreaming_doServerStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_doServerStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_doServerStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_doServerStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_doServerStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BidirectionalStreaming_doServerStreaming_Params) ServerCallback() BidirectionalStreaming_ServerCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return BidirectionalStreaming_ServerCallback(p.Interface().Client())
}

func (s BidirectionalStreaming_doServerStreaming_Params) HasServerCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BidirectionalStreaming_doServerStreaming_Params) SetServerCallback(v BidirectionalStreaming_ServerCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// BidirectionalStreaming_doServerStreaming_Params_List is a list of BidirectionalStreaming_doServerStreaming_Params.
type BidirectionalStreaming_doServerStreaming_Params_List = capnp.StructList[BidirectionalStreaming_doServerStreaming_Params]

// NewBidirectionalStreaming_doServerStreaming_Params creates a new list of BidirectionalStreaming_doServerStreaming_Params.
func NewBidirectionalStreaming_doServerStreaming_Params_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_doServerStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BidirectionalStreaming_doServerStreaming_Params](l), err
}

// BidirectionalStreaming_doServerStreaming_Params_Future is a wrapper for a BidirectionalStreaming_doServerStreaming_Params promised by a client call.
type BidirectionalStreaming_doServerStreaming_Params_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_doServerStreaming_Params_Future) Struct() (BidirectionalStreaming_doServerStreaming_Params, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_doServerStreaming_Params(p.Struct()), err
}
func (p BidirectionalStreaming_doServerStreaming_Params_Future) ServerCallback() BidirectionalStreaming_ServerCallback {
	return BidirectionalStreaming_ServerCallback(p.Future.Field(0, nil).Client())
}

type BidirectionalStreaming_doServerStreaming_Results capnp.Struct

// BidirectionalStreaming_doServerStreaming_Results_TypeID is the unique identifier for the type BidirectionalStreaming_doServerStreaming_Results.
const BidirectionalStreaming_doServerStreaming_Results_TypeID = 0xa7f35b64171e1899

func NewBidirectionalStreaming_doServerStreaming_Results(s *capnp.Segment) (BidirectionalStreaming_doServerStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_doServerStreaming_Results(st), err
}

func NewRootBidirectionalStreaming_doServerStreaming_Results(s *capnp.Segment) (BidirectionalStreaming_doServerStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_doServerStreaming_Results(st), err
}

func ReadRootBidirectionalStreaming_doServerStreaming_Results(msg *capnp.Message) (BidirectionalStreaming_doServerStreaming_Results, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_doServerStreaming_Results(root.Struct()), err
}

func (s BidirectionalStreaming_doServerStreaming_Results) String() string {
	str, _ := text.Marshal(0xa7f35b64171e1899, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_doServerStreaming_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_doServerStreaming_Results) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_doServerStreaming_Results {
	return BidirectionalStreaming_doServerStreaming_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_doServerStreaming_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_doServerStreaming_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_doServerStreaming_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_doServerStreaming_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BidirectionalStreaming_doServerStreaming_Results_List is a list of BidirectionalStreaming_doServerStreaming_Results.
type BidirectionalStreaming_doServerStreaming_Results_List = capnp.StructList[BidirectionalStreaming_doServerStreaming_Results]

// NewBidirectionalStreaming_doServerStreaming_Results creates a new list of BidirectionalStreaming_doServerStreaming_Results.
func NewBidirectionalStreaming_doServerStreaming_Results_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_doServerStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BidirectionalStreaming_doServerStreaming_Results](l), err
}

// BidirectionalStreaming_doServerStreaming_Results_Future is a wrapper for a BidirectionalStreaming_doServerStreaming_Results promised by a client call.
type BidirectionalStreaming_doServerStreaming_Results_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_doServerStreaming_Results_Future) Struct() (BidirectionalStreaming_doServerStreaming_Results, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_doServerStreaming_Results(p.Struct()), err
}

type BidirectionalStreaming_doClientStreaming_Params capnp.Struct

// BidirectionalStreaming_doClientStreaming_Params_TypeID is the unique identifier for the type BidirectionalStreaming_doClientStreaming_Params.
const BidirectionalStreaming_doClientStreaming_Params_TypeID = 0xbef386c967028dc4

func NewBidirectionalStreaming_doClientStreaming_Params(s *capnp.Segment) (BidirectionalStreaming_doClientStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_doClientStreaming_Params(st), err
}

func NewRootBidirectionalStreaming_doClientStreaming_Params(s *capnp.Segment) (BidirectionalStreaming_doClientStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BidirectionalStreaming_doClientStreaming_Params(st), err
}

func ReadRootBidirectionalStreaming_doClientStreaming_Params(msg *capnp.Message) (BidirectionalStreaming_doClientStreaming_Params, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_doClientStreaming_Params(root.Struct()), err
}

func (s BidirectionalStreaming_doClientStreaming_Params) String() string {
	str, _ := text.Marshal(0xbef386c967028dc4, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_doClientStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_doClientStreaming_Params) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_doClientStreaming_Params {
	return BidirectionalStreaming_doClientStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_doClientStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_doClientStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_doClientStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_doClientStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BidirectionalStreaming_doClientStreaming_Params_List is a list of BidirectionalStreaming_doClientStreaming_Params.
type BidirectionalStreaming_doClientStreaming_Params_List = capnp.StructList[BidirectionalStreaming_doClientStreaming_Params]

// NewBidirectionalStreaming_doClientStreaming_Params creates a new list of BidirectionalStreaming_doClientStreaming_Params.
func NewBidirectionalStreaming_doClientStreaming_Params_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_doClientStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BidirectionalStreaming_doClientStreaming_Params](l), err
}

// BidirectionalStreaming_doClientStreaming_Params_Future is a wrapper for a BidirectionalStreaming_doClientStreaming_Params promised by a client call.
type BidirectionalStreaming_doClientStreaming_Params_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_doClientStreaming_Params_Future) Struct() (BidirectionalStreaming_doClientStreaming_Params, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_doClientStreaming_Params(p.Struct()), err
}

type BidirectionalStreaming_doClientStreaming_Results capnp.Struct

// BidirectionalStreaming_doClientStreaming_Results_TypeID is the unique identifier for the type BidirectionalStreaming_doClientStreaming_Results.
const BidirectionalStreaming_doClientStreaming_Results_TypeID = 0xd40c5fb4834f534e

func NewBidirectionalStreaming_doClientStreaming_Results(s *capnp.Segment) (BidirectionalStreaming_doClientStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_doClientStreaming_Results(st), err
}

func NewRootBidirectionalStreaming_doClientStreaming_Results(s *capnp.Segment) (BidirectionalStreaming_doClientStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreaming_doClientStreaming_Results(st), err
}

func ReadRootBidirectionalStreaming_doClientStreaming_Results(msg *capnp.Message) (BidirectionalStreaming_doClientStreaming_Results, error) {
	root, err := msg.Root()
	return BidirectionalStreaming_doClientStreaming_Results(root.Struct()), err
}

func (s BidirectionalStreaming_doClientStreaming_Results) String() string {
	str, _ := text.Marshal(0xd40c5fb4834f534e, capnp.Struct(s))
	return str
}

func (s BidirectionalStreaming_doClientStreaming_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreaming_doClientStreaming_Results) DecodeFromPtr(p capnp.Ptr) BidirectionalStreaming_doClientStreaming_Results {
	return BidirectionalStreaming_doClientStreaming_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreaming_doClientStreaming_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreaming_doClientStreaming_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreaming_doClientStreaming_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreaming_doClientStreaming_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BidirectionalStreaming_doClientStreaming_Results) ClientCallback() BidirectionalStreaming_ClientCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return BidirectionalStreaming_ClientCallback(p.Interface().Client())
}

func (s BidirectionalStreaming_doClientStreaming_Results) HasClientCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BidirectionalStreaming_doClientStreaming_Results) SetClientCallback(v BidirectionalStreaming_ClientCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// BidirectionalStreaming_doClientStreaming_Results_List is a list of BidirectionalStreaming_doClientStreaming_Results.
type BidirectionalStreaming_doClientStreaming_Results_List = capnp.StructList[BidirectionalStreaming_doClientStreaming_Results]

// NewBidirectionalStreaming_doClientStreaming_Results creates a new list of BidirectionalStreaming_doClientStreaming_Results.
func NewBidirectionalStreaming_doClientStreaming_Results_List(s *capnp.Segment, sz int32) (BidirectionalStreaming_doClientStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BidirectionalStreaming_doClientStreaming_Results](l), err
}

// BidirectionalStreaming_doClientStreaming_Results_Future is a wrapper for a BidirectionalStreaming_doClientStreaming_Results promised by a client call.
type BidirectionalStreaming_doClientStreaming_Results_Future struct{ *capnp.Future }

func (f BidirectionalStreaming_doClientStreaming_Results_Future) Struct() (BidirectionalStreaming_doClientStreaming_Results, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreaming_doClientStreaming_Results(p.Struct()), err
}
func (p BidirectionalStreaming_doClientStreaming_Results_Future) ClientCallback() BidirectionalStreaming_ClientCallback {
	return BidirectionalStreaming_ClientCallback(p.Future.Field(0, nil).Client())
}

type BidirectionalStreamingMessage capnp.Struct

// BidirectionalStreamingMessage_TypeID is the unique identifier for the type BidirectionalStreamingMessage.
const BidirectionalStreamingMessage_TypeID = 0xa2ce6c65a642601d

func NewBidirectionalStreamingMessage(s *capnp.Segment) (BidirectionalStreamingMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreamingMessage(st), err
}

func NewRootBidirectionalStreamingMessage(s *capnp.Segment) (BidirectionalStreamingMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BidirectionalStreamingMessage(st), err
}

func ReadRootBidirectionalStreamingMessage(msg *capnp.Message) (BidirectionalStreamingMessage, error) {
	root, err := msg.Root()
	return BidirectionalStreamingMessage(root.Struct()), err
}

func (s BidirectionalStreamingMessage) String() string {
	str, _ := text.Marshal(0xa2ce6c65a642601d, capnp.Struct(s))
	return str
}

func (s BidirectionalStreamingMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BidirectionalStreamingMessage) DecodeFromPtr(p capnp.Ptr) BidirectionalStreamingMessage {
	return BidirectionalStreamingMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BidirectionalStreamingMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BidirectionalStreamingMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BidirectionalStreamingMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BidirectionalStreamingMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BidirectionalStreamingMessage) Chunk() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BidirectionalStreamingMessage) HasChunk() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BidirectionalStreamingMessage) SetChunk(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BidirectionalStreamingMessage_List is a list of BidirectionalStreamingMessage.
type BidirectionalStreamingMessage_List = capnp.StructList[BidirectionalStreamingMessage]

// NewBidirectionalStreamingMessage creates a new list of BidirectionalStreamingMessage.
func NewBidirectionalStreamingMessage_List(s *capnp.Segment, sz int32) (BidirectionalStreamingMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BidirectionalStreamingMessage](l), err
}

// BidirectionalStreamingMessage_Future is a wrapper for a BidirectionalStreamingMessage promised by a client call.
type BidirectionalStreamingMessage_Future struct{ *capnp.Future }

func (f BidirectionalStreamingMessage_Future) Struct() (BidirectionalStreamingMessage, error) {
	p, err := f.Future.Ptr()
	return BidirectionalStreamingMessage(p.Struct()), err
}

const schema_8836f289aabc01d9 = "x\xda\xbcX}l\x1cW\x11\x9f\xd9\xbd\xcb\xdd\xde\xdd" +
	"\xc6~\xbc@\xe3R\xd7\"\x89S\xec(N\xe3\x93\x12" +
	"\x11\x08\xb6\x13\x15\x87\xa0\xb8>;q\xa1\x10\x85\xb3\xbd" +
	":\x1f\xb9;'\xb7N\xda\x1a\x19HJj\x82A*" +
	"\xa9\xac*V\x1d\xb0\x15SZ\x12\xda\xb4\x95(\x94X" +
	"\x16\x1f\x15n\x09R\xac\xba\xca\x07\xa5\xc5\x12\xa5\x11\xea" +
	"\x07I\x0c!\xa5]\xf4\xde\xde\xdb\xdd[_\xa2;\xfb" +
	"\xe0?\xfbv\xf67\xbf\x99\xf9\xcd\xbcy{\xe7*o" +
	"\xbdg\xad\xda_\x0aRd\xc2\xbb\xc8X\xb9\xff\xd6'" +
	"'\xb7o?\x04d=\x02x|\x00\xe1*\x7f\x8b\x04" +
	"\x1e\xe3\xe8\xab?\x1c\xfd\xa7\xb6\xec! \xcb\xd1h\xeb" +
	"?6x|i\xdf\x00x\x91\x99T\xfa\xa7\x906\xf8" +
	"}\x00t\xa3\xbf\x0e\xd0\xd0_;\xf1\xa5\xc8\xdd[\x07" +
	"\x80\xd4#d\x8cv\xfa\x87$@\xda\xc7\x0d\xde\xbb\xe3" +
	"\xa5\xd9\x17\xde\x1a\xf9\x01\x90J\xd9H\xbf\x10\xf8O\xc9" +
	"\x96w\xc7\x010<\xe6\xff%\xd2\xd3\xfe[\x00\xe8\xa4" +
	"\xbf\x91\xce2P\xe3\xe9\xef\xcd<\x9f80>h\xb2" +
	"2\xe1^\xf3\xdf\xcb\xe0\xfe\xcd\xe1\x16%\xe4\xf7\xc7\xb6" +
	"|\xfdQ eh\x9c?>\xfc\xb0\xfa\x9b\xd9W2" +
	"\x86\xe5J5\xd2\xd5\x0a#W\xa50\xe3\xb3?\xe9m" +
	"-kJ<\x06$,b\xfc\xbc\xb2\x81\xc5X\xfe\xd5" +
	"M?\xd6\x12\x7f\x1c\x05R\x8d\xc6y\xfc\xd5\x93\x87/" +
	"\xaf\xfbN\x06\xa6A\xd9$\xd1(\x87\xd9\xc9a\x0et" +
	"\x05\xb7\xde\xff\xa7\x07\x8f;`\xfa\x94\xeb\x08\x1e\xa3\xe4" +
	"\xdb\xf7_]\xb9\xfccc\xb9\xd8\xecU\x96!=\xc0" +
	"a\xfa8L\xd3\x87/\xf6W\xc7[\xc7\x80TX\xb1" +
	"\x0d+C\x08HOr\x83\xa3Ko\xbf\xa5\xf3\xcbW" +
	"\x1e\x07\xd2 \xfc\x9cU.0\xbaW\xbfrOe\xd5" +
	"\x89\xcf=\x05$,\x1b\x97\x9a\xc6\xab<o<\xfd," +
	"K\xe2\xb42\x83\xf4\x1f\xdc\xc9\xdbJ#-\x0b\xb0$" +
	"\xae\xfa\xa6g\xc9\xd8\xed/\x9f2k\xc2q00\xca" +
	"p\xacW\xc9r\xd9xy\xf4\xd2\x86{\xd6G\xcf0" +
	"\x1c\x0c\x0c!-\x0b\xb0bT\x06\x1ai\x84\xe3L\xac" +
	"\xf9]\xd9\xf4\xc8\xaa\x9f\x03)\x93\xed\xe8\x00\xe9\xa7\x02" +
	"\xd7\xe9]\xcc\x846\x04\x1ai\x92\x1b7<\xbe\xe3=" +
	"\xe3\xbb\x93\xcf\x03i\xb6\xa2\xdb\x11\xb8UfB\x08\xb0" +
	"\xe8~\xfb})6\xf9\xd0\x95qGt#\x81)\xc6" +
	"j\xf1\xc7\xcf\x9c\xfc\xe4\xcf\x82\x13\x9c\x95%8&\x11" +
	"\xc6\xea4w\xf4\x8b@?U\x83\xcc\xd1\x1b\x7f\xd8y" +
	"\xf4G\xdb\x07^\x04R\x89\xb6\xa0L\x87\xb3\x81\xcbH" +
	"\x093\xa3j\x909\xad\xdf\xd2\xf9\xe1_\xa4\xdf\xbfd" +
	"\x96\xce4Z\x1d\xacez\xba\x8b\x1b\xdc\xb9r\xe4\xef" +
	"\xca#5g\x9cE\x89\x07\x8f\xb0\xa2<\xc0\x0d\xc2\x91" +
	"\x99\xb5\x97\x92\x95Sf\\\x9c\xf6pp\x99\x0c\x1e\xa3" +
	"\xa9\xf5\xee\x07\x9f\xdb\x15z\xc5\x0c\xc8|u,x\x81" +
	"aO\xf2W7\xbe\xb3\xee\x99\xcf\xbe>>\x0d\xa4Z" +
	"\xb6E\x06\x18~;\x18\x90\xa8\x1a\xba\x83\x095\xd4O" +
	"\x0f\x87X\\\x8f\x1e\xf3\x7fq\xe8\xd7o\xbe\xeaP\xd9" +
	"\xde\x90\xc4\xf23\xf0N\xcf\xa1\xfb\x0e\xd1sNGZ" +
	"h\x8a9:\x1cb\x8e>\xfd\xd3?\xaf82~\xf1" +
	"\"\x90\xcf\x88WO\x86\x0e\xb2W\xdb\x97\xf4\x9f\xabh" +
	"\x1b\x9eq\xb0\x7f\"\xc4\xd9/\x0e\x0d\xbe^\xf5\xf0\xf8" +
	"\x9b@\x1ad\x9b)`\xf8T\xe8\xa0D\xa7\x19%z" +
	"6\xd4H?\xe0\xe4.\xb4=\xdb\xff\xfe\xbb\x17\xdf\xe2" +
	"3\xc1\x12\x8eI\xe5\xaf\xa1)\xa4\xa8\xb2\x17>\xe0t" +
	"\xd2\x89&\xe9\xd8\xae\x96\xcbs\xa0\xcb\xd5\x83\x12m\xe0" +
	"\x96\x1b\xd5F\x1ag\x7f\x19\xb7\xcd>\xf6\x94v\xae\xfc" +
	"\x0a\x90\xf5\xb2=-\x00\xc3\x11U\x92h\x92[\xc7\xd5" +
	"F:\xc8\xad\xbf\xb1z\xe0Z\xe8\x91\xf6\xab\xce\x82\xf6" +
	"\xa9\xbc\xa0\x83*s\xfe\xaf\xbf\x9d\xf8\xc23\xa9'\xae" +
	"\x99\xb90\x0dN\xab\xbd\xcc\xe0<7h\xed*\xf9\xd6" +
	"\xbak\xcf]w\x0a\x15\x17s\xa1V-\xae\x83CF" +
	"GtOj\xcf\x1a\xbd\xc3\xdf\xa5%\xa3k:\x12q" +
	"-\xd5\xd3\xda\x93\xd6\xa2\xc9x*\xb6\xbf\xb6\x86?\xdf" +
	"\xb09\xfb\xf7\xb6\xda\x9a\xcen\xeb\xbf\x15\xcd\xd1t4" +
	"\x89\xba\x85\xb5(\x17Vn\xa4m\x9a\xaeGc\xa85" +
	"#F<\xb2\x07\xc0\x83\x00D\xad\x05\x88\xf8e\x8c," +
	"\x91\xb0\xa2\xa3k_j7\xaa \xa1\x0ah\xf9P\x0a" +
	"\xe4\xbb9\x9aH\xb4G;v\xd7\xe8Z\xaa\xd3\xf4\xaa" +
	"q\xe2rRwz\x1e\x02\x88\x94\xca\x18\xb9MBC" +
	"\xa0\xa3 +\xeb1,\xb5{\x12\x10K\x1d\x94\xbc\xf9" +
	"R\xaa39E<\x88\x0eA\xe0VC\x90\x04\x80\x88" +
	"G\xf6\x02X\x07\x17\x8a\xb3\x82\x90v\x90\x88\xe23D" +
	"\x01\xc0\x17O\xc5\xea\xb1\x19\xb1(\xb5l\xd1\xf4}\x09" +
	"\xb9'+'[\x01\"!\x19#KYNl\x8aH" +
	"l\xf6\x80H\x1c\xa9\x909\x83}\xa9h\xfa\x81\x8c\xd7" +
	"\x16M\xdf\xb3M\xd3KX\xde\x0b.\xb6\x8f\xc3\xe9Z" +
	"z\xbf\x96v\x0b\xaa\xd5\xf5kV0u,\x9a\x1e\xdd" +
	"\x95\x99\xf6xg<\xadu\xf4\xc4\xbbS\xd1\x84\x1bo" +
	"S\xce\x87\x19\xc5@\xc1\xd4\x0b\xe8\x85\x9a\xce\xee\x94\xb6" +
	"\xa2\x8ew\x93~\xd3T\xeeet|\xf3\xc9\xa4w\x0e" +
	"\xda\x0e\xfewgwkwR\xeb\xe9\xba\x91\x04\xda\x1d" +
	"\x12H\x9b\xa5\xd4\x811\xc0R{Kq\xf5C`\xbe" +
	"\xc9fl\xb2\xabjqr\xe55?I\xf0\xb6\xf2E" +
	";v\x9b\xe9b}%\x06'\x8a\xd3\xc4\xea+1\x1f" +
	"xt\xd9}U\x94\x99\xc3\"\xf195\xe9\xcd7\x12" +
	"9\x15\xe3#\xc3\xde\x8fr\x8e\x0c\xb1\x05\xa0X\x08\xf3" +
	"\x19\x19\x92[\x17u\xa60\xec\x8c\x89\xdd\x01\xc5f\xe7" +
	"\x84\xe5\xda\xc9\x01\x1b\x9c\xb7\x04\xccl\xe6;\xb5\xbf\xe6" +
	"\x90\xa7\x9e\xc1\x80\x92\xd86>\xaf\xad\xf5\xb7\x88\xfat" +
	"\x15{\xce\x11\xe8\xcd\xb7\xed\xe5T\x8c\xe5\xd8\xcfs," +
	"\xce{L\x9d\x9a\xb8/<\xb4\xeb(Y\xcbr\\\xe5" +
	"C{/G\xb1:\x91\xf2j\x90\x08\x99S\xd6\x126" +
	"F\xb2\xcb\xb0\xa8\x10\xe1\xb24WDcZ[\xed\xff" +
	"mN7W\xf0\x99\x97\xdf\x99c\xc9\xdfu\xe6\xe43" +
	"\xda2er:\xba7k\xb2\xf1\xc9\x1a\x05\x99\x0f6" +
	"\xeb\xc2\xe3\x12\xce\xffD\xd5s\xe6B1\xe5\x99k\xa4" +
	"\xf7:3\x9c\xe1\x05u&3$\xf6^\xebJ\xb3o" +
	"\xbe\xb4\x98z\x10\x1d\xab\xb8\xd2\xebX\x9e\x95^\xc3T" +
	"\x88M\xc2\xd8\xecb\x95\xe9\x12qC@q\x85$k" +
	"\x8f\x80DV\xb3.\x11\xf7.\x14\xf7\x15\xf2\x09\xf6\xac" +
	"\x9cw\x09\xc7GA\x08c\xf5h\x88Te\xfd\xeal" +
	"\x9d\x8f\x14z~\xb7\x98+\x07\x08\x80\"\x1e\x829\xd4" +
	"\xeb,\xa2\xee\xca\x1f\x12;\xd9\xae\"~\xb4\xd0\xd33" +
	"\x97Z\x8b\x12\xa5(z>\x1d\xa1\x14\xc9\x0b\xd8\xa7\x9a" +
	"\xb8\x1f\xa1\xb8;\xe6\xb3\x07\x14\xb0{,\xf0~\xb3\xf0" +
	"\x19\xe3\x88U|\xb4@q\xcb\xcf'V\xdf<w\x1e" +
	"\x87_\xf1\xd5\x0c\xc5\xa7\x9ay\xfb\xbda\xdf\xdd\xf4(" +
	"\xc9\xe3Jg}\x05tMz\xffB\xfb$\xb3\xcd\xdf" +
	"\x88\x8e@v\xd1\xb1>@\x14\xed\xe0\xb9I\x9b-p" +
	"\x9d\xfao\x00\x00\x00\xff\xff}5\xea\x82"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8836f289aabc01d9,
		Nodes: []uint64{
			0x855454c9aa1a7626,
			0x862265f6a29fd699,
			0x8b4a4f5159acdd73,
			0x91a1e8bbf5ca27f0,
			0x95be816cb8e28cb0,
			0x977b48a5fb036c06,
			0x9c6c4e19537aa8d1,
			0xa2ce6c65a642601d,
			0xa483dc784a0b6881,
			0xa5162326f478840f,
			0xa553692a87c6fe4e,
			0xa7f35b64171e1899,
			0xaf46ac2925575cf4,
			0xb1cb1ea514047f2b,
			0xb3b0e00429be4ee9,
			0xb72ba1d519c52fc0,
			0xb8c98afff055a741,
			0xbef386c967028dc4,
			0xc00bae28adcd1b0e,
			0xc68b54a0995dcce0,
			0xcac802e1fe644840,
			0xcd2e9309eba12630,
			0xd2256de931e25133,
			0xd40c5fb4834f534e,
			0xd5bedf3eb236ee3d,
			0xd6e6c29a58089e97,
			0xd81385778574ee8b,
			0xdbdbbe9224deab3b,
			0xe29d561fd8871462,
			0xe6be9029df950c0e,
			0xe8dbeffb87b356da,
			0xf2525f9e024e6c72,
			0xf31dd865af9cf51c,
			0xf462930cf88b2d7e,
			0xf8a96eb24bace7f7,
			0xfab4f836800f6853,
		},
		Compressed: true,
	})
}
