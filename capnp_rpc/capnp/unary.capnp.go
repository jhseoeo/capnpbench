// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Unary capnp.Client

// Unary_TypeID is the unique identifier for the type Unary.
const Unary_TypeID = 0xb72ba1d519c52fc0

func (c Unary) DoSomething(ctx context.Context, params func(Unary_doSomething_Params) error) (Unary_doSomething_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb72ba1d519c52fc0,
			MethodID:      0,
			InterfaceName: "capnp/schema/unary.capnp:Unary",
			MethodName:    "doSomething",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Unary_doSomething_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Unary_doSomething_Results_Future{Future: ans.Future()}, release

}

func (c Unary) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Unary) String() string {
	return "Unary(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Unary) AddRef() Unary {
	return Unary(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Unary) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Unary) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Unary) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Unary) DecodeFromPtr(p capnp.Ptr) Unary {
	return Unary(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Unary) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Unary) IsSame(other Unary) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Unary) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Unary) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Unary_Server is a Unary with a local implementation.
type Unary_Server interface {
	DoSomething(context.Context, Unary_doSomething) error
}

// Unary_NewServer creates a new Server from an implementation of Unary_Server.
func Unary_NewServer(s Unary_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Unary_Methods(nil, s), s, c)
}

// Unary_ServerToClient creates a new Client from an implementation of Unary_Server.
// The caller is responsible for calling Release on the returned Client.
func Unary_ServerToClient(s Unary_Server) Unary {
	return Unary(capnp.NewClient(Unary_NewServer(s)))
}

// Unary_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Unary_Methods(methods []server.Method, s Unary_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb72ba1d519c52fc0,
			MethodID:      0,
			InterfaceName: "capnp/schema/unary.capnp:Unary",
			MethodName:    "doSomething",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DoSomething(ctx, Unary_doSomething{call})
		},
	})

	return methods
}

// Unary_doSomething holds the state for a server call to Unary.doSomething.
// See server.Call for documentation.
type Unary_doSomething struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Unary_doSomething) Args() Unary_doSomething_Params {
	return Unary_doSomething_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Unary_doSomething) AllocResults() (Unary_doSomething_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Unary_doSomething_Results(r), err
}

// Unary_List is a list of Unary.
type Unary_List = capnp.CapList[Unary]

// NewUnary_List creates a new list of Unary.
func NewUnary_List(s *capnp.Segment, sz int32) (Unary_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Unary](l), err
}

type Unary_doSomething_Params capnp.Struct

// Unary_doSomething_Params_TypeID is the unique identifier for the type Unary_doSomething_Params.
const Unary_doSomething_Params_TypeID = 0xcd2e9309eba12630

func NewUnary_doSomething_Params(s *capnp.Segment) (Unary_doSomething_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Unary_doSomething_Params(st), err
}

func NewRootUnary_doSomething_Params(s *capnp.Segment) (Unary_doSomething_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Unary_doSomething_Params(st), err
}

func ReadRootUnary_doSomething_Params(msg *capnp.Message) (Unary_doSomething_Params, error) {
	root, err := msg.Root()
	return Unary_doSomething_Params(root.Struct()), err
}

func (s Unary_doSomething_Params) String() string {
	str, _ := text.Marshal(0xcd2e9309eba12630, capnp.Struct(s))
	return str
}

func (s Unary_doSomething_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unary_doSomething_Params) DecodeFromPtr(p capnp.Ptr) Unary_doSomething_Params {
	return Unary_doSomething_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unary_doSomething_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unary_doSomething_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unary_doSomething_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unary_doSomething_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unary_doSomething_Params) ReqMessage() (ReqMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ReqMessage(p.Struct()), err
}

func (s Unary_doSomething_Params) HasReqMessage() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Unary_doSomething_Params) SetReqMessage(v ReqMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewReqMessage sets the reqMessage field to a newly
// allocated ReqMessage struct, preferring placement in s's segment.
func (s Unary_doSomething_Params) NewReqMessage() (ReqMessage, error) {
	ss, err := NewReqMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ReqMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Unary_doSomething_Params_List is a list of Unary_doSomething_Params.
type Unary_doSomething_Params_List = capnp.StructList[Unary_doSomething_Params]

// NewUnary_doSomething_Params creates a new list of Unary_doSomething_Params.
func NewUnary_doSomething_Params_List(s *capnp.Segment, sz int32) (Unary_doSomething_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Unary_doSomething_Params](l), err
}

// Unary_doSomething_Params_Future is a wrapper for a Unary_doSomething_Params promised by a client call.
type Unary_doSomething_Params_Future struct{ *capnp.Future }

func (f Unary_doSomething_Params_Future) Struct() (Unary_doSomething_Params, error) {
	p, err := f.Future.Ptr()
	return Unary_doSomething_Params(p.Struct()), err
}
func (p Unary_doSomething_Params_Future) ReqMessage() ReqMessage_Future {
	return ReqMessage_Future{Future: p.Future.Field(0, nil)}
}

type Unary_doSomething_Results capnp.Struct

// Unary_doSomething_Results_TypeID is the unique identifier for the type Unary_doSomething_Results.
const Unary_doSomething_Results_TypeID = 0xa553692a87c6fe4e

func NewUnary_doSomething_Results(s *capnp.Segment) (Unary_doSomething_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Unary_doSomething_Results(st), err
}

func NewRootUnary_doSomething_Results(s *capnp.Segment) (Unary_doSomething_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Unary_doSomething_Results(st), err
}

func ReadRootUnary_doSomething_Results(msg *capnp.Message) (Unary_doSomething_Results, error) {
	root, err := msg.Root()
	return Unary_doSomething_Results(root.Struct()), err
}

func (s Unary_doSomething_Results) String() string {
	str, _ := text.Marshal(0xa553692a87c6fe4e, capnp.Struct(s))
	return str
}

func (s Unary_doSomething_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Unary_doSomething_Results) DecodeFromPtr(p capnp.Ptr) Unary_doSomething_Results {
	return Unary_doSomething_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Unary_doSomething_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Unary_doSomething_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Unary_doSomething_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Unary_doSomething_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Unary_doSomething_Results) RespMessage() (RespMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RespMessage(p.Struct()), err
}

func (s Unary_doSomething_Results) HasRespMessage() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Unary_doSomething_Results) SetRespMessage(v RespMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRespMessage sets the respMessage field to a newly
// allocated RespMessage struct, preferring placement in s's segment.
func (s Unary_doSomething_Results) NewRespMessage() (RespMessage, error) {
	ss, err := NewRespMessage(capnp.Struct(s).Segment())
	if err != nil {
		return RespMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Unary_doSomething_Results_List is a list of Unary_doSomething_Results.
type Unary_doSomething_Results_List = capnp.StructList[Unary_doSomething_Results]

// NewUnary_doSomething_Results creates a new list of Unary_doSomething_Results.
func NewUnary_doSomething_Results_List(s *capnp.Segment, sz int32) (Unary_doSomething_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Unary_doSomething_Results](l), err
}

// Unary_doSomething_Results_Future is a wrapper for a Unary_doSomething_Results promised by a client call.
type Unary_doSomething_Results_Future struct{ *capnp.Future }

func (f Unary_doSomething_Results_Future) Struct() (Unary_doSomething_Results, error) {
	p, err := f.Future.Ptr()
	return Unary_doSomething_Results(p.Struct()), err
}
func (p Unary_doSomething_Results_Future) RespMessage() RespMessage_Future {
	return RespMessage_Future{Future: p.Future.Field(0, nil)}
}

type ReqMessage capnp.Struct

// ReqMessage_TypeID is the unique identifier for the type ReqMessage.
const ReqMessage_TypeID = 0xa5162326f478840f

func NewReqMessage(s *capnp.Segment) (ReqMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReqMessage(st), err
}

func NewRootReqMessage(s *capnp.Segment) (ReqMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReqMessage(st), err
}

func ReadRootReqMessage(msg *capnp.Message) (ReqMessage, error) {
	root, err := msg.Root()
	return ReqMessage(root.Struct()), err
}

func (s ReqMessage) String() string {
	str, _ := text.Marshal(0xa5162326f478840f, capnp.Struct(s))
	return str
}

func (s ReqMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ReqMessage) DecodeFromPtr(p capnp.Ptr) ReqMessage {
	return ReqMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ReqMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ReqMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ReqMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ReqMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ReqMessage) Chunk() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ReqMessage) HasChunk() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ReqMessage) SetChunk(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ReqMessage_List is a list of ReqMessage.
type ReqMessage_List = capnp.StructList[ReqMessage]

// NewReqMessage creates a new list of ReqMessage.
func NewReqMessage_List(s *capnp.Segment, sz int32) (ReqMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ReqMessage](l), err
}

// ReqMessage_Future is a wrapper for a ReqMessage promised by a client call.
type ReqMessage_Future struct{ *capnp.Future }

func (f ReqMessage_Future) Struct() (ReqMessage, error) {
	p, err := f.Future.Ptr()
	return ReqMessage(p.Struct()), err
}

type RespMessage capnp.Struct

// RespMessage_TypeID is the unique identifier for the type RespMessage.
const RespMessage_TypeID = 0x977b48a5fb036c06

func NewRespMessage(s *capnp.Segment) (RespMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RespMessage(st), err
}

func NewRootRespMessage(s *capnp.Segment) (RespMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RespMessage(st), err
}

func ReadRootRespMessage(msg *capnp.Message) (RespMessage, error) {
	root, err := msg.Root()
	return RespMessage(root.Struct()), err
}

func (s RespMessage) String() string {
	str, _ := text.Marshal(0x977b48a5fb036c06, capnp.Struct(s))
	return str
}

func (s RespMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RespMessage) DecodeFromPtr(p capnp.Ptr) RespMessage {
	return RespMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RespMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RespMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RespMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RespMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RespMessage) Chunk() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RespMessage) HasChunk() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RespMessage) SetChunk(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// RespMessage_List is a list of RespMessage.
type RespMessage_List = capnp.StructList[RespMessage]

// NewRespMessage creates a new list of RespMessage.
func NewRespMessage_List(s *capnp.Segment, sz int32) (RespMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RespMessage](l), err
}

// RespMessage_Future is a wrapper for a RespMessage promised by a client call.
type RespMessage_Future struct{ *capnp.Future }

func (f RespMessage_Future) Struct() (RespMessage, error) {
	p, err := f.Future.Ptr()
	return RespMessage(p.Struct()), err
}
