// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type ServerStreaming capnp.Client

// ServerStreaming_TypeID is the unique identifier for the type ServerStreaming.
const ServerStreaming_TypeID = 0xb3b0e00429be4ee9

func (c ServerStreaming) DoStreaming(ctx context.Context, params func(ServerStreaming_doStreaming_Params) error) (ServerStreaming_doStreaming_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb3b0e00429be4ee9,
			MethodID:      0,
			InterfaceName: "capnp/schema/serverStreaming.capnp:ServerStreaming",
			MethodName:    "doStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServerStreaming_doStreaming_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServerStreaming_doStreaming_Results_Future{Future: ans.Future()}, release

}

func (c ServerStreaming) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ServerStreaming) String() string {
	return "ServerStreaming(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ServerStreaming) AddRef() ServerStreaming {
	return ServerStreaming(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ServerStreaming) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ServerStreaming) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ServerStreaming) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ServerStreaming) DecodeFromPtr(p capnp.Ptr) ServerStreaming {
	return ServerStreaming(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ServerStreaming) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ServerStreaming) IsSame(other ServerStreaming) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ServerStreaming) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ServerStreaming) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ServerStreaming_Server is a ServerStreaming with a local implementation.
type ServerStreaming_Server interface {
	DoStreaming(context.Context, ServerStreaming_doStreaming) error
}

// ServerStreaming_NewServer creates a new Server from an implementation of ServerStreaming_Server.
func ServerStreaming_NewServer(s ServerStreaming_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServerStreaming_Methods(nil, s), s, c)
}

// ServerStreaming_ServerToClient creates a new Client from an implementation of ServerStreaming_Server.
// The caller is responsible for calling Release on the returned Client.
func ServerStreaming_ServerToClient(s ServerStreaming_Server) ServerStreaming {
	return ServerStreaming(capnp.NewClient(ServerStreaming_NewServer(s)))
}

// ServerStreaming_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServerStreaming_Methods(methods []server.Method, s ServerStreaming_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb3b0e00429be4ee9,
			MethodID:      0,
			InterfaceName: "capnp/schema/serverStreaming.capnp:ServerStreaming",
			MethodName:    "doStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DoStreaming(ctx, ServerStreaming_doStreaming{call})
		},
	})

	return methods
}

// ServerStreaming_doStreaming holds the state for a server call to ServerStreaming.doStreaming.
// See server.Call for documentation.
type ServerStreaming_doStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServerStreaming_doStreaming) Args() ServerStreaming_doStreaming_Params {
	return ServerStreaming_doStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServerStreaming_doStreaming) AllocResults() (ServerStreaming_doStreaming_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServerStreaming_doStreaming_Results(r), err
}

// ServerStreaming_List is a list of ServerStreaming.
type ServerStreaming_List = capnp.CapList[ServerStreaming]

// NewServerStreaming_List creates a new list of ServerStreaming.
func NewServerStreaming_List(s *capnp.Segment, sz int32) (ServerStreaming_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServerStreaming](l), err
}

type ServerStreaming_Callback capnp.Client

// ServerStreaming_Callback_TypeID is the unique identifier for the type ServerStreaming_Callback.
const ServerStreaming_Callback_TypeID = 0xaf46ac2925575cf4

func (c ServerStreaming_Callback) SendMessage(ctx context.Context, params func(ServerStreaming_Callback_sendMessage_Params) error) (ServerStreaming_Callback_sendMessage_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf46ac2925575cf4,
			MethodID:      0,
			InterfaceName: "capnp/schema/serverStreaming.capnp:ServerStreaming.Callback",
			MethodName:    "sendMessage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServerStreaming_Callback_sendMessage_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServerStreaming_Callback_sendMessage_Results_Future{Future: ans.Future()}, release

}

func (c ServerStreaming_Callback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ServerStreaming_Callback) String() string {
	return "ServerStreaming_Callback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ServerStreaming_Callback) AddRef() ServerStreaming_Callback {
	return ServerStreaming_Callback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ServerStreaming_Callback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ServerStreaming_Callback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ServerStreaming_Callback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ServerStreaming_Callback) DecodeFromPtr(p capnp.Ptr) ServerStreaming_Callback {
	return ServerStreaming_Callback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ServerStreaming_Callback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ServerStreaming_Callback) IsSame(other ServerStreaming_Callback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ServerStreaming_Callback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ServerStreaming_Callback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ServerStreaming_Callback_Server is a ServerStreaming_Callback with a local implementation.
type ServerStreaming_Callback_Server interface {
	SendMessage(context.Context, ServerStreaming_Callback_sendMessage) error
}

// ServerStreaming_Callback_NewServer creates a new Server from an implementation of ServerStreaming_Callback_Server.
func ServerStreaming_Callback_NewServer(s ServerStreaming_Callback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServerStreaming_Callback_Methods(nil, s), s, c)
}

// ServerStreaming_Callback_ServerToClient creates a new Client from an implementation of ServerStreaming_Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func ServerStreaming_Callback_ServerToClient(s ServerStreaming_Callback_Server) ServerStreaming_Callback {
	return ServerStreaming_Callback(capnp.NewClient(ServerStreaming_Callback_NewServer(s)))
}

// ServerStreaming_Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServerStreaming_Callback_Methods(methods []server.Method, s ServerStreaming_Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf46ac2925575cf4,
			MethodID:      0,
			InterfaceName: "capnp/schema/serverStreaming.capnp:ServerStreaming.Callback",
			MethodName:    "sendMessage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendMessage(ctx, ServerStreaming_Callback_sendMessage{call})
		},
	})

	return methods
}

// ServerStreaming_Callback_sendMessage holds the state for a server call to ServerStreaming_Callback.sendMessage.
// See server.Call for documentation.
type ServerStreaming_Callback_sendMessage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServerStreaming_Callback_sendMessage) Args() ServerStreaming_Callback_sendMessage_Params {
	return ServerStreaming_Callback_sendMessage_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServerStreaming_Callback_sendMessage) AllocResults() (ServerStreaming_Callback_sendMessage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServerStreaming_Callback_sendMessage_Results(r), err
}

// ServerStreaming_Callback_List is a list of ServerStreaming_Callback.
type ServerStreaming_Callback_List = capnp.CapList[ServerStreaming_Callback]

// NewServerStreaming_Callback_List creates a new list of ServerStreaming_Callback.
func NewServerStreaming_Callback_List(s *capnp.Segment, sz int32) (ServerStreaming_Callback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServerStreaming_Callback](l), err
}

type ServerStreaming_Callback_sendMessage_Params capnp.Struct

// ServerStreaming_Callback_sendMessage_Params_TypeID is the unique identifier for the type ServerStreaming_Callback_sendMessage_Params.
const ServerStreaming_Callback_sendMessage_Params_TypeID = 0xf8a96eb24bace7f7

func NewServerStreaming_Callback_sendMessage_Params(s *capnp.Segment) (ServerStreaming_Callback_sendMessage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerStreaming_Callback_sendMessage_Params(st), err
}

func NewRootServerStreaming_Callback_sendMessage_Params(s *capnp.Segment) (ServerStreaming_Callback_sendMessage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerStreaming_Callback_sendMessage_Params(st), err
}

func ReadRootServerStreaming_Callback_sendMessage_Params(msg *capnp.Message) (ServerStreaming_Callback_sendMessage_Params, error) {
	root, err := msg.Root()
	return ServerStreaming_Callback_sendMessage_Params(root.Struct()), err
}

func (s ServerStreaming_Callback_sendMessage_Params) String() string {
	str, _ := text.Marshal(0xf8a96eb24bace7f7, capnp.Struct(s))
	return str
}

func (s ServerStreaming_Callback_sendMessage_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerStreaming_Callback_sendMessage_Params) DecodeFromPtr(p capnp.Ptr) ServerStreaming_Callback_sendMessage_Params {
	return ServerStreaming_Callback_sendMessage_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerStreaming_Callback_sendMessage_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerStreaming_Callback_sendMessage_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerStreaming_Callback_sendMessage_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerStreaming_Callback_sendMessage_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerStreaming_Callback_sendMessage_Params) ServerStreamingMsg() (ServerStreamingMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ServerStreamingMessage(p.Struct()), err
}

func (s ServerStreaming_Callback_sendMessage_Params) HasServerStreamingMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerStreaming_Callback_sendMessage_Params) SetServerStreamingMsg(v ServerStreamingMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewServerStreamingMsg sets the serverStreamingMsg field to a newly
// allocated ServerStreamingMessage struct, preferring placement in s's segment.
func (s ServerStreaming_Callback_sendMessage_Params) NewServerStreamingMsg() (ServerStreamingMessage, error) {
	ss, err := NewServerStreamingMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ServerStreamingMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerStreaming_Callback_sendMessage_Params_List is a list of ServerStreaming_Callback_sendMessage_Params.
type ServerStreaming_Callback_sendMessage_Params_List = capnp.StructList[ServerStreaming_Callback_sendMessage_Params]

// NewServerStreaming_Callback_sendMessage_Params creates a new list of ServerStreaming_Callback_sendMessage_Params.
func NewServerStreaming_Callback_sendMessage_Params_List(s *capnp.Segment, sz int32) (ServerStreaming_Callback_sendMessage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServerStreaming_Callback_sendMessage_Params](l), err
}

// ServerStreaming_Callback_sendMessage_Params_Future is a wrapper for a ServerStreaming_Callback_sendMessage_Params promised by a client call.
type ServerStreaming_Callback_sendMessage_Params_Future struct{ *capnp.Future }

func (f ServerStreaming_Callback_sendMessage_Params_Future) Struct() (ServerStreaming_Callback_sendMessage_Params, error) {
	p, err := f.Future.Ptr()
	return ServerStreaming_Callback_sendMessage_Params(p.Struct()), err
}
func (p ServerStreaming_Callback_sendMessage_Params_Future) ServerStreamingMsg() ServerStreamingMessage_Future {
	return ServerStreamingMessage_Future{Future: p.Future.Field(0, nil)}
}

type ServerStreaming_Callback_sendMessage_Results capnp.Struct

// ServerStreaming_Callback_sendMessage_Results_TypeID is the unique identifier for the type ServerStreaming_Callback_sendMessage_Results.
const ServerStreaming_Callback_sendMessage_Results_TypeID = 0xdbdbbe9224deab3b

func NewServerStreaming_Callback_sendMessage_Results(s *capnp.Segment) (ServerStreaming_Callback_sendMessage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServerStreaming_Callback_sendMessage_Results(st), err
}

func NewRootServerStreaming_Callback_sendMessage_Results(s *capnp.Segment) (ServerStreaming_Callback_sendMessage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServerStreaming_Callback_sendMessage_Results(st), err
}

func ReadRootServerStreaming_Callback_sendMessage_Results(msg *capnp.Message) (ServerStreaming_Callback_sendMessage_Results, error) {
	root, err := msg.Root()
	return ServerStreaming_Callback_sendMessage_Results(root.Struct()), err
}

func (s ServerStreaming_Callback_sendMessage_Results) String() string {
	str, _ := text.Marshal(0xdbdbbe9224deab3b, capnp.Struct(s))
	return str
}

func (s ServerStreaming_Callback_sendMessage_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerStreaming_Callback_sendMessage_Results) DecodeFromPtr(p capnp.Ptr) ServerStreaming_Callback_sendMessage_Results {
	return ServerStreaming_Callback_sendMessage_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerStreaming_Callback_sendMessage_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerStreaming_Callback_sendMessage_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerStreaming_Callback_sendMessage_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerStreaming_Callback_sendMessage_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ServerStreaming_Callback_sendMessage_Results_List is a list of ServerStreaming_Callback_sendMessage_Results.
type ServerStreaming_Callback_sendMessage_Results_List = capnp.StructList[ServerStreaming_Callback_sendMessage_Results]

// NewServerStreaming_Callback_sendMessage_Results creates a new list of ServerStreaming_Callback_sendMessage_Results.
func NewServerStreaming_Callback_sendMessage_Results_List(s *capnp.Segment, sz int32) (ServerStreaming_Callback_sendMessage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ServerStreaming_Callback_sendMessage_Results](l), err
}

// ServerStreaming_Callback_sendMessage_Results_Future is a wrapper for a ServerStreaming_Callback_sendMessage_Results promised by a client call.
type ServerStreaming_Callback_sendMessage_Results_Future struct{ *capnp.Future }

func (f ServerStreaming_Callback_sendMessage_Results_Future) Struct() (ServerStreaming_Callback_sendMessage_Results, error) {
	p, err := f.Future.Ptr()
	return ServerStreaming_Callback_sendMessage_Results(p.Struct()), err
}

type ServerStreaming_doStreaming_Params capnp.Struct

// ServerStreaming_doStreaming_Params_TypeID is the unique identifier for the type ServerStreaming_doStreaming_Params.
const ServerStreaming_doStreaming_Params_TypeID = 0xcac802e1fe644840

func NewServerStreaming_doStreaming_Params(s *capnp.Segment) (ServerStreaming_doStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerStreaming_doStreaming_Params(st), err
}

func NewRootServerStreaming_doStreaming_Params(s *capnp.Segment) (ServerStreaming_doStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerStreaming_doStreaming_Params(st), err
}

func ReadRootServerStreaming_doStreaming_Params(msg *capnp.Message) (ServerStreaming_doStreaming_Params, error) {
	root, err := msg.Root()
	return ServerStreaming_doStreaming_Params(root.Struct()), err
}

func (s ServerStreaming_doStreaming_Params) String() string {
	str, _ := text.Marshal(0xcac802e1fe644840, capnp.Struct(s))
	return str
}

func (s ServerStreaming_doStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerStreaming_doStreaming_Params) DecodeFromPtr(p capnp.Ptr) ServerStreaming_doStreaming_Params {
	return ServerStreaming_doStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerStreaming_doStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerStreaming_doStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerStreaming_doStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerStreaming_doStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerStreaming_doStreaming_Params) Callback() ServerStreaming_Callback {
	p, _ := capnp.Struct(s).Ptr(0)
	return ServerStreaming_Callback(p.Interface().Client())
}

func (s ServerStreaming_doStreaming_Params) HasCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerStreaming_doStreaming_Params) SetCallback(v ServerStreaming_Callback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ServerStreaming_doStreaming_Params_List is a list of ServerStreaming_doStreaming_Params.
type ServerStreaming_doStreaming_Params_List = capnp.StructList[ServerStreaming_doStreaming_Params]

// NewServerStreaming_doStreaming_Params creates a new list of ServerStreaming_doStreaming_Params.
func NewServerStreaming_doStreaming_Params_List(s *capnp.Segment, sz int32) (ServerStreaming_doStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServerStreaming_doStreaming_Params](l), err
}

// ServerStreaming_doStreaming_Params_Future is a wrapper for a ServerStreaming_doStreaming_Params promised by a client call.
type ServerStreaming_doStreaming_Params_Future struct{ *capnp.Future }

func (f ServerStreaming_doStreaming_Params_Future) Struct() (ServerStreaming_doStreaming_Params, error) {
	p, err := f.Future.Ptr()
	return ServerStreaming_doStreaming_Params(p.Struct()), err
}
func (p ServerStreaming_doStreaming_Params_Future) Callback() ServerStreaming_Callback {
	return ServerStreaming_Callback(p.Future.Field(0, nil).Client())
}

type ServerStreaming_doStreaming_Results capnp.Struct

// ServerStreaming_doStreaming_Results_TypeID is the unique identifier for the type ServerStreaming_doStreaming_Results.
const ServerStreaming_doStreaming_Results_TypeID = 0x9c6c4e19537aa8d1

func NewServerStreaming_doStreaming_Results(s *capnp.Segment) (ServerStreaming_doStreaming_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServerStreaming_doStreaming_Results(st), err
}

func NewRootServerStreaming_doStreaming_Results(s *capnp.Segment) (ServerStreaming_doStreaming_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ServerStreaming_doStreaming_Results(st), err
}

func ReadRootServerStreaming_doStreaming_Results(msg *capnp.Message) (ServerStreaming_doStreaming_Results, error) {
	root, err := msg.Root()
	return ServerStreaming_doStreaming_Results(root.Struct()), err
}

func (s ServerStreaming_doStreaming_Results) String() string {
	str, _ := text.Marshal(0x9c6c4e19537aa8d1, capnp.Struct(s))
	return str
}

func (s ServerStreaming_doStreaming_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerStreaming_doStreaming_Results) DecodeFromPtr(p capnp.Ptr) ServerStreaming_doStreaming_Results {
	return ServerStreaming_doStreaming_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerStreaming_doStreaming_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerStreaming_doStreaming_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerStreaming_doStreaming_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerStreaming_doStreaming_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ServerStreaming_doStreaming_Results_List is a list of ServerStreaming_doStreaming_Results.
type ServerStreaming_doStreaming_Results_List = capnp.StructList[ServerStreaming_doStreaming_Results]

// NewServerStreaming_doStreaming_Results creates a new list of ServerStreaming_doStreaming_Results.
func NewServerStreaming_doStreaming_Results_List(s *capnp.Segment, sz int32) (ServerStreaming_doStreaming_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ServerStreaming_doStreaming_Results](l), err
}

// ServerStreaming_doStreaming_Results_Future is a wrapper for a ServerStreaming_doStreaming_Results promised by a client call.
type ServerStreaming_doStreaming_Results_Future struct{ *capnp.Future }

func (f ServerStreaming_doStreaming_Results_Future) Struct() (ServerStreaming_doStreaming_Results, error) {
	p, err := f.Future.Ptr()
	return ServerStreaming_doStreaming_Results(p.Struct()), err
}

type ServerStreamingMessage capnp.Struct

// ServerStreamingMessage_TypeID is the unique identifier for the type ServerStreamingMessage.
const ServerStreamingMessage_TypeID = 0xe8dbeffb87b356da

func NewServerStreamingMessage(s *capnp.Segment) (ServerStreamingMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerStreamingMessage(st), err
}

func NewRootServerStreamingMessage(s *capnp.Segment) (ServerStreamingMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerStreamingMessage(st), err
}

func ReadRootServerStreamingMessage(msg *capnp.Message) (ServerStreamingMessage, error) {
	root, err := msg.Root()
	return ServerStreamingMessage(root.Struct()), err
}

func (s ServerStreamingMessage) String() string {
	str, _ := text.Marshal(0xe8dbeffb87b356da, capnp.Struct(s))
	return str
}

func (s ServerStreamingMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerStreamingMessage) DecodeFromPtr(p capnp.Ptr) ServerStreamingMessage {
	return ServerStreamingMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerStreamingMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerStreamingMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerStreamingMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerStreamingMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerStreamingMessage) Chunk() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ServerStreamingMessage) HasChunk() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerStreamingMessage) SetChunk(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ServerStreamingMessage_List is a list of ServerStreamingMessage.
type ServerStreamingMessage_List = capnp.StructList[ServerStreamingMessage]

// NewServerStreamingMessage creates a new list of ServerStreamingMessage.
func NewServerStreamingMessage_List(s *capnp.Segment, sz int32) (ServerStreamingMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServerStreamingMessage](l), err
}

// ServerStreamingMessage_Future is a wrapper for a ServerStreamingMessage promised by a client call.
type ServerStreamingMessage_Future struct{ *capnp.Future }

func (f ServerStreamingMessage_Future) Struct() (ServerStreamingMessage, error) {
	p, err := f.Future.Ptr()
	return ServerStreamingMessage(p.Struct()), err
}
