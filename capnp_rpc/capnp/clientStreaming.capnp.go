// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type ClientStreaming capnp.Client

// ClientStreaming_TypeID is the unique identifier for the type ClientStreaming.
const ClientStreaming_TypeID = 0xc00bae28adcd1b0e

func (c ClientStreaming) DoStreaming(ctx context.Context, params func(ClientStreaming_doStreaming_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc00bae28adcd1b0e,
			MethodID:      0,
			InterfaceName: "capnp/schema/clientStreaming.capnp:ClientStreaming",
			MethodName:    "doStreaming",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClientStreaming_doStreaming_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c ClientStreaming) Done(ctx context.Context, params func(ClientStreaming_done_Params) error) (ClientStreaming_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc00bae28adcd1b0e,
			MethodID:      1,
			InterfaceName: "capnp/schema/clientStreaming.capnp:ClientStreaming",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClientStreaming_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ClientStreaming_done_Results_Future{Future: ans.Future()}, release

}

func (c ClientStreaming) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ClientStreaming) String() string {
	return "ClientStreaming(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ClientStreaming) AddRef() ClientStreaming {
	return ClientStreaming(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ClientStreaming) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ClientStreaming) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ClientStreaming) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ClientStreaming) DecodeFromPtr(p capnp.Ptr) ClientStreaming {
	return ClientStreaming(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ClientStreaming) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ClientStreaming) IsSame(other ClientStreaming) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ClientStreaming) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ClientStreaming) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ClientStreaming_Server is a ClientStreaming with a local implementation.
type ClientStreaming_Server interface {
	DoStreaming(context.Context, ClientStreaming_doStreaming) error

	Done(context.Context, ClientStreaming_done) error
}

// ClientStreaming_NewServer creates a new Server from an implementation of ClientStreaming_Server.
func ClientStreaming_NewServer(s ClientStreaming_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClientStreaming_Methods(nil, s), s, c)
}

// ClientStreaming_ServerToClient creates a new Client from an implementation of ClientStreaming_Server.
// The caller is responsible for calling Release on the returned Client.
func ClientStreaming_ServerToClient(s ClientStreaming_Server) ClientStreaming {
	return ClientStreaming(capnp.NewClient(ClientStreaming_NewServer(s)))
}

// ClientStreaming_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClientStreaming_Methods(methods []server.Method, s ClientStreaming_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc00bae28adcd1b0e,
			MethodID:      0,
			InterfaceName: "capnp/schema/clientStreaming.capnp:ClientStreaming",
			MethodName:    "doStreaming",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DoStreaming(ctx, ClientStreaming_doStreaming{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc00bae28adcd1b0e,
			MethodID:      1,
			InterfaceName: "capnp/schema/clientStreaming.capnp:ClientStreaming",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, ClientStreaming_done{call})
		},
	})

	return methods
}

// ClientStreaming_doStreaming holds the state for a server call to ClientStreaming.doStreaming.
// See server.Call for documentation.
type ClientStreaming_doStreaming struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClientStreaming_doStreaming) Args() ClientStreaming_doStreaming_Params {
	return ClientStreaming_doStreaming_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ClientStreaming_doStreaming) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// ClientStreaming_done holds the state for a server call to ClientStreaming.done.
// See server.Call for documentation.
type ClientStreaming_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClientStreaming_done) Args() ClientStreaming_done_Params {
	return ClientStreaming_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ClientStreaming_done) AllocResults() (ClientStreaming_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientStreaming_done_Results(r), err
}

// ClientStreaming_List is a list of ClientStreaming.
type ClientStreaming_List = capnp.CapList[ClientStreaming]

// NewClientStreaming_List creates a new list of ClientStreaming.
func NewClientStreaming_List(s *capnp.Segment, sz int32) (ClientStreaming_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ClientStreaming](l), err
}

type ClientStreaming_doStreaming_Params capnp.Struct

// ClientStreaming_doStreaming_Params_TypeID is the unique identifier for the type ClientStreaming_doStreaming_Params.
const ClientStreaming_doStreaming_Params_TypeID = 0xf462930cf88b2d7e

func NewClientStreaming_doStreaming_Params(s *capnp.Segment) (ClientStreaming_doStreaming_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientStreaming_doStreaming_Params(st), err
}

func NewRootClientStreaming_doStreaming_Params(s *capnp.Segment) (ClientStreaming_doStreaming_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientStreaming_doStreaming_Params(st), err
}

func ReadRootClientStreaming_doStreaming_Params(msg *capnp.Message) (ClientStreaming_doStreaming_Params, error) {
	root, err := msg.Root()
	return ClientStreaming_doStreaming_Params(root.Struct()), err
}

func (s ClientStreaming_doStreaming_Params) String() string {
	str, _ := text.Marshal(0xf462930cf88b2d7e, capnp.Struct(s))
	return str
}

func (s ClientStreaming_doStreaming_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientStreaming_doStreaming_Params) DecodeFromPtr(p capnp.Ptr) ClientStreaming_doStreaming_Params {
	return ClientStreaming_doStreaming_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientStreaming_doStreaming_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientStreaming_doStreaming_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientStreaming_doStreaming_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientStreaming_doStreaming_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientStreaming_doStreaming_Params) ClientStreamingMsg() (ClientStreamingMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ClientStreamingMessage(p.Struct()), err
}

func (s ClientStreaming_doStreaming_Params) HasClientStreamingMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientStreaming_doStreaming_Params) SetClientStreamingMsg(v ClientStreamingMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewClientStreamingMsg sets the clientStreamingMsg field to a newly
// allocated ClientStreamingMessage struct, preferring placement in s's segment.
func (s ClientStreaming_doStreaming_Params) NewClientStreamingMsg() (ClientStreamingMessage, error) {
	ss, err := NewClientStreamingMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ClientStreamingMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClientStreaming_doStreaming_Params_List is a list of ClientStreaming_doStreaming_Params.
type ClientStreaming_doStreaming_Params_List = capnp.StructList[ClientStreaming_doStreaming_Params]

// NewClientStreaming_doStreaming_Params creates a new list of ClientStreaming_doStreaming_Params.
func NewClientStreaming_doStreaming_Params_List(s *capnp.Segment, sz int32) (ClientStreaming_doStreaming_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClientStreaming_doStreaming_Params](l), err
}

// ClientStreaming_doStreaming_Params_Future is a wrapper for a ClientStreaming_doStreaming_Params promised by a client call.
type ClientStreaming_doStreaming_Params_Future struct{ *capnp.Future }

func (f ClientStreaming_doStreaming_Params_Future) Struct() (ClientStreaming_doStreaming_Params, error) {
	p, err := f.Future.Ptr()
	return ClientStreaming_doStreaming_Params(p.Struct()), err
}
func (p ClientStreaming_doStreaming_Params_Future) ClientStreamingMsg() ClientStreamingMessage_Future {
	return ClientStreamingMessage_Future{Future: p.Future.Field(0, nil)}
}

type ClientStreaming_done_Params capnp.Struct

// ClientStreaming_done_Params_TypeID is the unique identifier for the type ClientStreaming_done_Params.
const ClientStreaming_done_Params_TypeID = 0xa483dc784a0b6881

func NewClientStreaming_done_Params(s *capnp.Segment) (ClientStreaming_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientStreaming_done_Params(st), err
}

func NewRootClientStreaming_done_Params(s *capnp.Segment) (ClientStreaming_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientStreaming_done_Params(st), err
}

func ReadRootClientStreaming_done_Params(msg *capnp.Message) (ClientStreaming_done_Params, error) {
	root, err := msg.Root()
	return ClientStreaming_done_Params(root.Struct()), err
}

func (s ClientStreaming_done_Params) String() string {
	str, _ := text.Marshal(0xa483dc784a0b6881, capnp.Struct(s))
	return str
}

func (s ClientStreaming_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientStreaming_done_Params) DecodeFromPtr(p capnp.Ptr) ClientStreaming_done_Params {
	return ClientStreaming_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientStreaming_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientStreaming_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientStreaming_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientStreaming_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ClientStreaming_done_Params_List is a list of ClientStreaming_done_Params.
type ClientStreaming_done_Params_List = capnp.StructList[ClientStreaming_done_Params]

// NewClientStreaming_done_Params creates a new list of ClientStreaming_done_Params.
func NewClientStreaming_done_Params_List(s *capnp.Segment, sz int32) (ClientStreaming_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ClientStreaming_done_Params](l), err
}

// ClientStreaming_done_Params_Future is a wrapper for a ClientStreaming_done_Params promised by a client call.
type ClientStreaming_done_Params_Future struct{ *capnp.Future }

func (f ClientStreaming_done_Params_Future) Struct() (ClientStreaming_done_Params, error) {
	p, err := f.Future.Ptr()
	return ClientStreaming_done_Params(p.Struct()), err
}

type ClientStreaming_done_Results capnp.Struct

// ClientStreaming_done_Results_TypeID is the unique identifier for the type ClientStreaming_done_Results.
const ClientStreaming_done_Results_TypeID = 0xd6e6c29a58089e97

func NewClientStreaming_done_Results(s *capnp.Segment) (ClientStreaming_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientStreaming_done_Results(st), err
}

func NewRootClientStreaming_done_Results(s *capnp.Segment) (ClientStreaming_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ClientStreaming_done_Results(st), err
}

func ReadRootClientStreaming_done_Results(msg *capnp.Message) (ClientStreaming_done_Results, error) {
	root, err := msg.Root()
	return ClientStreaming_done_Results(root.Struct()), err
}

func (s ClientStreaming_done_Results) String() string {
	str, _ := text.Marshal(0xd6e6c29a58089e97, capnp.Struct(s))
	return str
}

func (s ClientStreaming_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientStreaming_done_Results) DecodeFromPtr(p capnp.Ptr) ClientStreaming_done_Results {
	return ClientStreaming_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientStreaming_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientStreaming_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientStreaming_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientStreaming_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ClientStreaming_done_Results_List is a list of ClientStreaming_done_Results.
type ClientStreaming_done_Results_List = capnp.StructList[ClientStreaming_done_Results]

// NewClientStreaming_done_Results creates a new list of ClientStreaming_done_Results.
func NewClientStreaming_done_Results_List(s *capnp.Segment, sz int32) (ClientStreaming_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ClientStreaming_done_Results](l), err
}

// ClientStreaming_done_Results_Future is a wrapper for a ClientStreaming_done_Results promised by a client call.
type ClientStreaming_done_Results_Future struct{ *capnp.Future }

func (f ClientStreaming_done_Results_Future) Struct() (ClientStreaming_done_Results, error) {
	p, err := f.Future.Ptr()
	return ClientStreaming_done_Results(p.Struct()), err
}

type ClientStreamingMessage capnp.Struct

// ClientStreamingMessage_TypeID is the unique identifier for the type ClientStreamingMessage.
const ClientStreamingMessage_TypeID = 0x862265f6a29fd699

func NewClientStreamingMessage(s *capnp.Segment) (ClientStreamingMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientStreamingMessage(st), err
}

func NewRootClientStreamingMessage(s *capnp.Segment) (ClientStreamingMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientStreamingMessage(st), err
}

func ReadRootClientStreamingMessage(msg *capnp.Message) (ClientStreamingMessage, error) {
	root, err := msg.Root()
	return ClientStreamingMessage(root.Struct()), err
}

func (s ClientStreamingMessage) String() string {
	str, _ := text.Marshal(0x862265f6a29fd699, capnp.Struct(s))
	return str
}

func (s ClientStreamingMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientStreamingMessage) DecodeFromPtr(p capnp.Ptr) ClientStreamingMessage {
	return ClientStreamingMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientStreamingMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientStreamingMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientStreamingMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientStreamingMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientStreamingMessage) Chunk() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ClientStreamingMessage) HasChunk() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientStreamingMessage) SetChunk(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ClientStreamingMessage_List is a list of ClientStreamingMessage.
type ClientStreamingMessage_List = capnp.StructList[ClientStreamingMessage]

// NewClientStreamingMessage creates a new list of ClientStreamingMessage.
func NewClientStreamingMessage_List(s *capnp.Segment, sz int32) (ClientStreamingMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClientStreamingMessage](l), err
}

// ClientStreamingMessage_Future is a wrapper for a ClientStreamingMessage promised by a client call.
type ClientStreamingMessage_Future struct{ *capnp.Future }

func (f ClientStreamingMessage_Future) Struct() (ClientStreamingMessage, error) {
	p, err := f.Future.Ptr()
	return ClientStreamingMessage(p.Struct()), err
}
